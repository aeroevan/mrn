// Code generated by protoc-gen-go.
// source: mrn.proto
// DO NOT EDIT!

package mrn

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf3 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AdsbLog struct {
	// * Timestamp of the generated record
	Time     *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Receiver *Receiver                   `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	// * Current position of the station
	Position *TPV            `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
	Messages []*ModeSMessage `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
}

func (m *AdsbLog) Reset()                    { *m = AdsbLog{} }
func (m *AdsbLog) String() string            { return proto.CompactTextString(m) }
func (*AdsbLog) ProtoMessage()               {}
func (*AdsbLog) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *AdsbLog) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *AdsbLog) GetReceiver() *Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *AdsbLog) GetPosition() *TPV {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *AdsbLog) GetMessages() []*ModeSMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*AdsbLog)(nil), "mrn.AdsbLog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mrn service

type MrnClient interface {
	LogMessages(ctx context.Context, in *AdsbLog, opts ...grpc.CallOption) (*google_protobuf3.Empty, error)
}

type mrnClient struct {
	cc *grpc.ClientConn
}

func NewMrnClient(cc *grpc.ClientConn) MrnClient {
	return &mrnClient{cc}
}

func (c *mrnClient) LogMessages(ctx context.Context, in *AdsbLog, opts ...grpc.CallOption) (*google_protobuf3.Empty, error) {
	out := new(google_protobuf3.Empty)
	err := grpc.Invoke(ctx, "/mrn.mrn/LogMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mrn service

type MrnServer interface {
	LogMessages(context.Context, *AdsbLog) (*google_protobuf3.Empty, error)
}

func RegisterMrnServer(s *grpc.Server, srv MrnServer) {
	s.RegisterService(&_Mrn_serviceDesc, srv)
}

func _Mrn_LogMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdsbLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MrnServer).LogMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mrn.mrn/LogMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MrnServer).LogMessages(ctx, req.(*AdsbLog))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mrn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mrn.mrn",
	HandlerType: (*MrnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogMessages",
			Handler:    _Mrn_LogMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mrn.proto",
}

func init() { proto.RegisterFile("mrn.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xad, 0x5d, 0xb4, 0x9b, 0xaa, 0x60, 0x0e, 0x52, 0xea, 0xc1, 0x65, 0xf1, 0xb0, 0x1e,
	0xcc, 0x42, 0xc5, 0x9b, 0x17, 0x0f, 0xde, 0x76, 0x41, 0xe2, 0xe2, 0x7d, 0x6b, 0xc7, 0x50, 0x30,
	0x9d, 0x90, 0x89, 0x82, 0x3f, 0xcd, 0x7f, 0x27, 0x9d, 0xa6, 0x3d, 0xe8, 0x2d, 0x79, 0xef, 0x9b,
	0x79, 0xbc, 0x11, 0x73, 0xeb, 0x3b, 0xe5, 0x3c, 0x06, 0x94, 0xa9, 0xf5, 0x5d, 0x79, 0x69, 0x10,
	0xcd, 0x07, 0xac, 0x59, 0xaa, 0x3f, 0xdf, 0xd7, 0x60, 0x5d, 0xf8, 0x1e, 0x88, 0xf2, 0xea, 0xaf,
	0x19, 0x5a, 0x0b, 0x14, 0xf6, 0xd6, 0x45, 0x60, 0x6e, 0x1c, 0xc5, 0x67, 0x6e, 0xb1, 0x81, 0xf1,
	0x73, 0xe6, 0xe1, 0x0d, 0xda, 0x2f, 0xf0, 0xc3, 0x7f, 0xf9, 0x93, 0x88, 0xe3, 0xc7, 0x86, 0xea,
	0x0d, 0x1a, 0xa9, 0xc4, 0xac, 0x5f, 0x53, 0x24, 0x8b, 0x64, 0x95, 0x57, 0xa5, 0x1a, 0x32, 0xd4,
	0x98, 0xa1, 0x76, 0x63, 0x86, 0x66, 0x4e, 0xde, 0x88, 0x6c, 0xdc, 0x56, 0x1c, 0xf2, 0xcc, 0xa9,
	0xea, 0x4b, 0xe8, 0x28, 0xea, 0xc9, 0x96, 0xd7, 0x22, 0x73, 0x48, 0x6d, 0x68, 0xb1, 0x2b, 0x52,
	0x46, 0x33, 0x46, 0x77, 0xcf, 0xaf, 0x7a, 0x72, 0xe4, 0xad, 0xc8, 0x2c, 0x10, 0xed, 0x0d, 0x50,
	0x31, 0x5b, 0xa4, 0xab, 0xbc, 0x3a, 0x67, 0x6a, 0x8b, 0x0d, 0xbc, 0x6c, 0x07, 0x47, 0x4f, 0x48,
	0xf5, 0x20, 0xfa, 0x43, 0xc9, 0x7b, 0x91, 0x6f, 0xd0, 0x44, 0x9b, 0xe4, 0x09, 0x8f, 0xc4, 0x4e,
	0xe5, 0xc5, 0xbf, 0x16, 0x4f, 0xfd, 0x19, 0x97, 0x07, 0xf5, 0x11, 0x2b, 0x77, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x41, 0x89, 0x8e, 0xa5, 0x78, 0x01, 0x00, 0x00,
}
